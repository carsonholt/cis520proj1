		           +--------------------------+
				|         CIS 520          |
		           | PROJECT 2: USER PROGRAMS |
		           |     DESIGN DOCUMENT      |
		           +--------------------------+

---- GROUP ----

>> Fill in the names of your group members.

Carson Holt
Ahmed Alkhraissi

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.
   https://github.com/yuan901202/pintos_2
   https://github.com/yuwumichcn223/pintos/blob/master

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
   char *fn; the file name
   char *save; the data to save
   struct thread *t; the thread

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?
   I used str_tokr() to split up the arguments at each space.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
   strtok_r() allows strings to be reused during the same call, parsing
   the input into multiple strings

>> A4: In Pintos, the kernel separates commands into an executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
   1. The shell is faster than the kernel.
   2.
			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
   typedef pid_t;
   struct fd_elem; an fd element
   static struct list file_list; the list of files on the system
   
>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
   File descriptors identify open files. They are unique in the entire
   operating system, as multiple processes can have one file open.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.
   I used a semaphore to reference and dereference the pointer.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?
   least: 0
   most: 1
   For 2 bytes
   least:0
   most:1 (same as before)
   There is room for improvement for the second figure, as using only 2 bytes
   is not using much page space at all.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.
   The call returns process_wait(tid_t), which returns -1 if a call
   has already been returned or the TID is invalid

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.
   Make sure to free all locks and semaphores at the end.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?
   The code returns -1 if cmd is false or the user passed a bad pointer,
   ensuring that bad data won't be returned. process_execute(cmd) is ran
   with an acquired lock.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?
   Use locks and semaphores to synchoronize. After C exits, let P know
   that C has ended. Use malloc and lock_release to free memory. I can't
   think of any special cases.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?
   I chose the first method because it was said to be easier to implement.
   Even though it may not be used much in industry, not all knowledge 
   learned in school is, so I thought, "why not take a shortcut?"

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?
   Advantages: Easier impelementation
   Disadvantages: Slower performance because MMU is not utilized

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
   
			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?
   I found the user memory the most difficult to implement, because of
   the lack of direction given. A bit too hard for the second project,
   and took a long time.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
   The part about system calling.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?
   You could of been more specific on where to implement user memory.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
   Question B6 was too long and convoluted.
