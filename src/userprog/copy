#include "userprog/syscall.h"
#include <stdio.h>
#include <syscall-nr.h>
#include "threads/interrupt.h"
#include "threads/thread.h"
/* My implementation */
#include "threads/vaddr.h"
#include "threads/init.h"
#include "userprog/process.h"
#include <list.h>
#include "filesys/file.h"
#include "filesys/filesys.h"
#include "threads/palloc.h"
#include "threads/malloc.h"
#include "devices/input.h"
#include "threads/synch.h"
#include "userprog/pagedir.h"
#include "vm/page.h"
/* == My implementation */

/* My implementation */
typedef int pid_t;

static int sys_write(int fd, void *usrc_, unsigned size);
static int sys_halt(void);
static int sys_create(const char *file, unsigned initial_size);
static int sys_open(const char *file);
static int sys_close(int fd);
static int sys_read(int fd, void *buffer, unsigned size);
static int sys_exec(const char *cmd);
static int sys_wait(pid_t pid);
static int sys_filesize(int fd);
static int sys_tell(int fd);
static int sys_seek(int fd, unsigned pos);
static int sys_remove(const char *file);
static int sys_mmap(int handle, void *addr);
static int sys_munmap(int mapping);
static void syscall_handler (struct intr_frame *);

static struct file *find_file_by_fd(int fd);
static struct fd_elem *find_fd_elem_by_fd(int fd);
static int alloc_fid(void);
static struct fd_elem *find_fd_elem_by_fd_in_process(int fd);

typedef int (*handler) (uint32_t, uint32_t, uint32_t);
static handler syscall_vec[128];
static void copy_in(void *, const void *, size_t);

static struct lock fs_lock;

struct fd_elem
{
	int fd;
	struct file *file;
	struct list_elem elem;
	struct list_elem thread_elem;
};

static struct list file_list;

/* == My implementation */

void
syscall_init (void) 
{
  intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");

  /* My implementation */
  syscall_vec[SYS_EXIT] = (handler)sys_exit;
  syscall_vec[SYS_HALT] = (handler)sys_halt;
  syscall_vec[SYS_CREATE] = (handler)sys_create;
  syscall_vec[SYS_OPEN] = (handler)sys_open;
  syscall_vec[SYS_CLOSE] = (handler)sys_close;
  syscall_vec[SYS_READ] = (handler)sys_read;
  syscall_vec[SYS_WRITE] = (handler)sys_write;
  syscall_vec[SYS_EXEC] = (handler)sys_exec;
  syscall_vec[SYS_WAIT] = (handler)sys_wait;
  syscall_vec[SYS_FILESIZE] = (handler)sys_filesize;
  syscall_vec[SYS_SEEK] = (handler)sys_seek;
  syscall_vec[SYS_TELL] = (handler)sys_tell;
  syscall_vec[SYS_REMOVE] = (handler)sys_remove;

  list_init(&file_list);
  list_init(&fs_lock);
  /* == My impelentation */
}

static void
syscall_handler (struct intr_frame *f) 
{
  typedef int syscall_function (int, int, int);
  
  struct syscall
  {
    size_t arg_cnt;
    syscall_function *func;
  };

  /* Table of system calls. */
  static const struct syscall syscall_table[] =
  {
    {0, (syscall_function *) sys_halt},
      {1, (syscall_function *) sys_exit},
      {1, (syscall_function *) sys_exec},
      {1, (syscall_function *) sys_wait},
      {2, (syscall_function *) sys_create},
      {1, (syscall_function *) sys_remove},
      {1, (syscall_function *) sys_open},
      {1, (syscall_function *) sys_filesize},
      {3, (syscall_function *) sys_read},
      {3, (syscall_function *) sys_write},
      {2, (syscall_function *) sys_seek},
      {1, (syscall_function *) sys_tell},
      {1, (syscall_function *) sys_close},
      {2, (syscall_function *) sys_mmap},
      {1, (syscall_function *) sys_munmap},
  };
  /* Old implementation 
  printf ("system call!\n");
  thread_exit (); */
  handler h;
  int *p;
  int ret;

  p = f->esp;

  if (!is_user_vaddr(p))
	goto terminate;
  if (*p < SYS_HALT || *p > SYS_INUMBER)
	goto terminate;

  h = syscall_vec[*p];

  if (!(is_user_vaddr(p + 1) && is_user_vaddr(p + 2) && is_user_vaddr(p + 3)))
	goto terminate;

  ret = h (*(p + 1), *(p + 2), *(p + 3));

  f->eax = ret;

  return;

terminate:
  sys_exit(-1);
  /* == My implementation */
}

/* Copes from user address usrc to kernel address dst */
static void copy_in (void *dst_, const void *usrc_, size_t size)
{
  uint8_t *dst = dst_;
  const uint8_t *usrc = usrc_;

  for (; size > 0; size--, dst++, usrc++)
    if (usrc >= (uint8_t *) PHYS_BASE || !get_user (dst, usrc))
      thread_exit ();
}

/* create a copy of user string us in kernel memory */
static_char * copy_in_string (const char *us)
{
  char *ks;
  char *upage;
  size_t length;

  ks = palloc_get_page(0);
  if (ks == NULL)
    thread_exit();

  for (length = 0; length < PGSIZE; length++)
  {
    if (us >= (char *) PHYS_BASE || !get_user (ks + length, us++))
    {
      palloc_free_page(ks);
      thread_exit();
    }

    if (ks[length] == '\0')
      return ks;
  }

  ks[PGSIZE - 1] = '\0';
}

/* A file descriptor which binds a file handle to a file */
struct file_descriptor
{
  struct list_elem elem;
  struct file *file;
  int handle;
};

static int sys_write
(int handle, void *usrc_, unsigned size)
{
  uint8_t *usrc = usrc_;
  //struct file *f;
  int bytes_written = 0;

  /*ret = -1;
  lock_acquire(&file_lock);
  if (fd == STDOUT_FILENO)
    putbuf(buffer, length);
  else if (fd == STDIN_FILENO)
    goto done;
  else if (!is_user_vaddr(buffer) || !is_user_vaddr(buffer + length))
  {
    lock_release(&file_lock);
    sys_exit(-1);
  } else 
  {
    f = find_file_by_fd(fd);
    if (!f) 
	    goto done;

    ret = file_write(f, buffer, length);
  }*/

  struct file_descriptor *fd;
  if (handle != STDOUT_FILENO);
  {
    fd = lookup_fd(handle);
  }

  lock_acquire(&fs_lock);
  while (size > 0)
  {
      /* How many bytes to write to this page? */
      size_t page_left = PGSIZE - pg_ofs (usrc);
      size_t write_amt = size < page_left ? size : page_left;
      off_t retval;

      /* Check that we can touch this user page. */
      if (!verify_user (usrc))
      {
          lock_release (&fs_lock);
          thread_exit ();
      }

      /* My Code Begins */
      /* Do the write on the standard output. */
      if (handle == STDOUT_FILENO) {
	  putbuf (usrc, write_amt);
	  retval = write_amt;
      }
      else {
	  retval = file_write (fd->file, usrc, write_amt);
      }
      
      if (retval < 0) {
	  if (bytes_written == 0) {
	      bytes_written = -1;
	  }
	  break;
      }
      bytes_written += retval;
      
      //short write -> done
      if (retval != (off_t) write_amt) {
	  break;
      }

      /* My Code Ends */
      
      /* Advance. */
      usrc += retval;
      size -= retval;
  }

  lock_release(&fs_lock);
  return bytes_written;
}

int sys_exit(int exit_code) {
  /* Close all files */
  /*struct thread *t;
  struct list_elem *l;

  t = thread_current();
  while (!list_empty(&t->files))
  {
    l = list_begin(&t->files);
    sys_close(list_entry (l, struct fd_elem, thread_elem)->fd);
  }

  t->return_status = status;*/
  thread_current()->exit_code = exit_code;
  thread_exit();
  NOT_REACHED();
}

static int sys_halt(void)
{
	shutdown_power_off();
}

static int sys_create(const char *ufile, unsigned initial_size) 
{
  /*if (!file)
    return sys_exit(-1);
  return filesys_create(file, initial_size);*/
  char *kfile = copy_in_string(ufile);
  bool ok;

  lock_acquire(&fs_lock);
  ok = filesys_create(kfile, initial_size);
  lock_release(&fs_lock);

  palloc_free_page(kfile);

  return ok;
}

static int sys_open(const char *ufile)
{
  /*struct file *f;
  struct fd_elem *fde;
  int ret;

  ret = -1;
  if (!file)
	  return -1;
  if (!is_user_vaddr(file))
	  sys_exit(-1);
  f = filesys_open(file);
  if (!f)
	goto done;

  fde = (struct fd_elem *)malloc(sizeof (struct fd_elem));
  if (!fde)
  {
    file_close(f);
    goto done;
  }

  fde->file = f;
  fde->fd = alloc_fid();
  list_push_back(&file_list, &fde->elem);
  list_push_back(&thread_current()->files,&fde->thread_elem);
  ret = fde->fd;
done:
  return ret;*/
  char *kfile = copy_in_string(ufile);
  struct file_descriptor *fd;
  int handle = -1;

  fd = malloc(sizeof *fd);
  if (fd != NULL)
    {
      lock_acquire(&fs_lock);
      fd->file = filesys_open(kfile);
      if (fd->file != NULL)
	{
	  struct thread *cur = thread_current();
	  handle = fd->handle = cur->next_handle++;
	  list_push_front(&cur->fds, &fd->elem);
	}
      else
	free(fd);
      lock_release(&fs_lock);
    }

  palloc_free_page(kfile);
  return handle;
}

static int sys_close(int handle)
{
  /*struct fd_elem *f;
  int ret;

  f = find(find_fd_elem_by_fd_in_process(fd));
  
  if (!f)
    goto done;*/
  struct file_descriptor *fd = lookup_fd(handle);
  lock_acquire(&fs_lock);
  file_close(fd->file);
  lock_release(&fs_lock);
  list_remove(&fd->elem);
  free(fd);
  return 0;
}

static sys_read(int handle, void *udst_, unsigned size)
{
  /*struct file *f;
  unsigned i;
  int ret;

  ret = -1;
  lock_acquire(&file_lock);
  if (fd == STDIN_FILENO)
  {
    for (i = 0; i != size; ++i)
      *(uint8_t *)(buffer + i) = input_getc ();
    ret = size;
    goto done;
  }
  else if (fd == STDOUT_FILENO)
    goto done;
  else if (!is_user_vaddr(buffer) || !is_user_vaddr(buffer + size))
  {
    lock_release(&file_lock);
    sys_exit(-1);
  }
  else
  {
    f = find_file_by_fd(fd);
    if (!f)
	 goto done;
    ret = file_read(f, buffer, size);
  }*/
  uint8_t *udst = udst_;
  struct file_descriptor *fd;
  int bytes_read = 0;

  fd = lookup_fd(handle);
  while (size > 0)
  {
    size_t page_left = PGSIZE - pg_ofs(udst);
    size_t read_amt = size < page_left ? size : page_left;
    off_t retval;

    // Read from file to page
    if (handle != STDIN_FILENO)
    {
      if (!page_lock(udst, true))
	thread_exit();
      lock_acquire(&fs_lock);
      retval = file_read(fd->file, udst, read_amt);
      lock_release(&fs_lock);
      page_unlock(udst);
    }
    else 
    {
      size_t i;

      for (i = 0; i < read_amt; i++)
      {
	char c = input_getc();
	if (!page_lock(udst, true))
	  thread_exit();
	udst[i] = c;
	page_unlock(udst);
      }
      bytes_read = read_amt;
    }

    if (retval < 0)
    {
      if (bytes_read == 0)
	bytes_read = -1;
      break;
    }
    bytes_read += retval;
    if (retval != (off_t) read_amt)
    {
      break;
    }

    // Advance
    udst += retval;
    size -= retval;
  }

  return bytes_read;
}

static int sys_exec(const char *ufile)
{
  tid_t tid;
  char *kfile = copy_in_string(ufile);

  /*if (!cmd || !is_user_vaddr(cmd))
    return -1; // bad pointer*/
  lock_acquire(&fs_lock);
  tid = process_execute(kfile);
  lock_release(&fs_lock);
  return tid;
}

static int sys_wait(pid_t pid)
{
  return process_wait(pid);
}

static struct file *find_file_by_fd(int fd)
{
  struct fd_elem *ret;
  struct list_elem *l;

  for (l = list_begin(&file_list); l != list_end(&file_list); l = list_next(l))
  {
    ret = list_entry(l, struct fd_elem, elem);
    if (ret->fd == fd)
      return ret;
  }

  return NULL;
}

static int alloc_fid(void)
{
	static int fid = 2;
	return fid++;
}

static int sys_tell(int handle) 
{
  struct file_descriptor *fd = lookup_fd(handle);
  unsigned position;

  lock_acquire(&fs_lock);
  position = file_tell(fd->file);
  lock_release(&fs_lock);
  return position;
  /*f = find_file_by_fd(fd);
  if (!f)
    return -1;*/
  return position;
}

static int sys_seek(int handle, unsigned pos)
{
  struct file_descriptor *fd = lookup_fd(handle);

  /*f = find_file_by_fd(fd);
  if (!f)
    return -1;*/
  lock_acquire(&fs_lock);
  if ((off_t) pos >= 0) {
    file_seek(fd->file, pos);
  }
  lock_release(&fs_lock);
    return 0;
}

static int sys_remove(const char *ufile)
{
  /*if (!file)
    return false;
  if (!is_user_vaddr(file))
    sys_exit(-1);

  return filesys_remove(file);*/
  char *kfile = copy_in_string(ufile);
  bool ok;

  lock_acquire(&fs_lock);
  ok = filesys_remove(kfile);
  lock_release(&fs_lock);

  palloc_free_page(kfile);

  return ok;
}

static struct fd_elem *find_fd_elem_by_fd_in_process(int fd)
{
  struct fd_elem *ret;
  struct list_elem *l;
  struct thread *t;

  t = thread_current();

  for (l = list_begin(&t->files); l != list_end(&t->files); l = list_next(l))
  {
    ret - list_entry(l, struct fd_elem, thread_elem);
    if (ret->fd == fd)
	return ret;
  }

  return NULL;
}

struct mapping 
{
  struct list_elem elem;
  int handle;
  struct file *file;
  uint8_t *base;
  size_t page_cnt;
};

/* Returns the file descriptor that corresponds with the given handle */
static struct mapping *lookup_mapping(int handle)
{
  struct thread *cur = thread_current();
  struct list_elem *e;

  for (e = list_begin(&cur->mappings); e != list_end(&cur->mappings);
	e = list_next(e))
  {
	  struct mapping *m = list_entry(e, struct mapping, elem);
	  if (m->handle == handle)
	    return m;
  }

  thread_exit();
}

/* Remove mapping from virtual address space */
static void unmap(struct mapping *m)
{
  list_remove(&m->elem);

  for (int i = 0; i < m->page_cnt; i++)
  {
    if (pagedir_is_dirty(thread_current()->pagedir, ((const void *) ((m->base) + (PGSIZE * i))))) {
      lock_acquire(&fs_lock);
      file_write_at(m->file, (const void *) (m->base + (PGSIZE * i)), (PGSIZE*(m->page_cnt)), (PGSIZE * i));
      lock_release(&fs_lock);
    }
  }

  // deallocate all memory mapped pages to free memory
  for (int i = 0; i < m->page_cnt; i++)
  {
    page_deallocate((void *) ((m->base) + (PGSIZE * i)));
  }
}
/* Syscall to mmap */
static int sys_mmap(int handle, void *addr)
{
  struct file_descriptor *fd = lookup_fd(handle);
  struct mapping *m = malloc(sizeof *m);
  size_t offset;
  off_t length;

  if (m == NULL || addr == NULL || pg_ofs(addr) != 0)
    return -1;

  m->handle = thread_current()->next_handle++;
  lock_acquire(&fs_lock);
  m->file = file_reopen(fd->file);
  lock_release(&fs_lock);
  if (m->file == NULL)
  {
    free(m);
    return -1;
  }
  m->base = addr;
  m->page_cnt = 0;
  list_push_front(&thread_current()->mappings, &m->elem);

  offset = 0;
  lock_acquire(&fs_lock);
  length = file_length(m->file);
  lock_release(&fs_lock);
  while (length > 0)
  {
    struct page *p = page_allocate ((uint8_t *) addr + offset, false);
    if (p == NULL)
    {
      unmap(m);
      return -1;
    }
    p->private = false;
    p->file = m->file;
    p->file_offset = offset;
    p->file_bytes = length >= PGSIZE ? PGSIZE : length;
    offset += p->file_bytes;
    length -= p->file_bytes;
    m->page_cnt++;
  }

  return m->handle;
}

/* System call to m unmap */
static int sys_munmap(int mapping)
{
  struct mapping *map = lookup_mapping(mapping);
  unmap(map);
  return 0;
}
